// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TypeRunnerBE.Models;

#nullable disable

namespace TypeRunnerBE.Migrations
{
    [DbContext(typeof(TypeRunnerContext))]
    partial class TypeMarathonContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TypeRunnerBE.Models.Passage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SourceId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("Passages");
                });

            modelBuilder.Entity("TypeRunnerBE.Models.Race", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AverageWpm")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PassageId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PassageId");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("TypeRunnerBE.Models.Source", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Sources");
                });

            modelBuilder.Entity("TypeRunnerBE.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AverageWpm")
                        .HasColumnType("integer");

                    b.Property<int?>("CurrentRaceId")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CurrentRaceId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TypeRunnerBE.Models.UserFriend", b =>
                {
                    b.Property<int>("FromUserId")
                        .HasColumnType("integer");

                    b.Property<int>("ToUserId")
                        .HasColumnType("integer");

                    b.HasKey("FromUserId", "ToUserId");

                    b.HasIndex("ToUserId");

                    b.ToTable("UserFriends", (string)null);
                });

            modelBuilder.Entity("TypeRunnerBE.Models.UserRaceMistake", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RaceId")
                        .HasColumnType("integer");

                    b.Property<string>("Word")
                        .HasColumnType("text");

                    b.Property<int>("NumberOfTimes")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RaceId", "Word");

                    b.ToTable("UserRaceMistakes");
                });

            modelBuilder.Entity("TypeRunnerBE.Models.UserRaceRecord", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RaceId")
                        .HasColumnType("integer");

                    b.Property<int>("Wpm")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RaceId");

                    b.HasIndex("RaceId");

                    b.ToTable("UserRaceRecords");
                });

            modelBuilder.Entity("TypeRunnerBE.Models.Passage", b =>
                {
                    b.HasOne("TypeRunnerBE.Models.Source", "Source")
                        .WithMany("Passages")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("TypeRunnerBE.Models.Race", b =>
                {
                    b.HasOne("TypeRunnerBE.Models.Passage", "Passage")
                        .WithMany()
                        .HasForeignKey("PassageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Passage");
                });

            modelBuilder.Entity("TypeRunnerBE.Models.User", b =>
                {
                    b.HasOne("TypeRunnerBE.Models.Race", "CurrentRace")
                        .WithMany("Racers")
                        .HasForeignKey("CurrentRaceId");

                    b.Navigation("CurrentRace");
                });

            modelBuilder.Entity("TypeRunnerBE.Models.UserFriend", b =>
                {
                    b.HasOne("TypeRunnerBE.Models.User", "FromUser")
                        .WithMany()
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TypeRunnerBE.Models.User", "ToUser")
                        .WithMany()
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromUser");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("TypeRunnerBE.Models.UserRaceMistake", b =>
                {
                    b.HasOne("TypeRunnerBE.Models.UserRaceRecord", "UserRace")
                        .WithMany("Mistakes")
                        .HasForeignKey("UserId", "RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserRace");
                });

            modelBuilder.Entity("TypeRunnerBE.Models.UserRaceRecord", b =>
                {
                    b.HasOne("TypeRunnerBE.Models.Race", "Race")
                        .WithMany("UserRecords")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TypeRunnerBE.Models.User", "User")
                        .WithMany("RaceRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Race");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TypeRunnerBE.Models.Race", b =>
                {
                    b.Navigation("Racers");

                    b.Navigation("UserRecords");
                });

            modelBuilder.Entity("TypeRunnerBE.Models.Source", b =>
                {
                    b.Navigation("Passages");
                });

            modelBuilder.Entity("TypeRunnerBE.Models.User", b =>
                {
                    b.Navigation("RaceRecords");
                });

            modelBuilder.Entity("TypeRunnerBE.Models.UserRaceRecord", b =>
                {
                    b.Navigation("Mistakes");
                });
#pragma warning restore 612, 618
        }
    }
}
